import { app, BrowserWindow } from 'electron';
import { loadSettings, saveSettings } from './settings';
import { setupIpcHandlers } from './ipc-handlers';
import { getDefaultDatabasePath } from './export-handler';
import electronSquirrelStartup from 'electron-squirrel-startup';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (electronSquirrelStartup) {
  app.quit();
}

let mainWindow: BrowserWindow | null = null;

const createWindow = (): void => {
  // Load saved settings to get window size
  const { settings, windowSize } = loadSettings();
  
  // Create the browser window with PRD specifications
  mainWindow = new BrowserWindow({
    width: windowSize.width,
    height: windowSize.height,
    minWidth: 900,
    minHeight: 600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
    },
    title: 'Logos Notes Exporter',
    show: false, // Don't show until ready
  });

  // Load the index.html of the app
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Show window when ready to prevent visual flash
  mainWindow.once('ready-to-show', () => {
    if (mainWindow) {
      mainWindow.show();
      
      // Send initial settings to renderer
      mainWindow.webContents.send('settings-loaded', settings);
      mainWindow.webContents.send('output-log', '🚀 Logos Notes Exporter ready!');
      
      // Auto-detect database on startup
      mainWindow.webContents.send('output-log', '🔍 Auto-detecting Logos database...');
      
      // Run database detection in background
      setTimeout(async () => {
        try {
          const detectedPath = getDefaultDatabasePath();
          if (detectedPath && mainWindow) {
            mainWindow.webContents.send('database-detected', detectedPath);
            mainWindow.webContents.send('output-log', `✅ Database detected: ${detectedPath}`);
          } else if (mainWindow) {
            mainWindow.webContents.send('output-log', '⚠️ No database auto-detected. Use "Select Database" to choose manually.');
          }
        } catch (error) {
          console.error('Database detection failed:', error);
          if (mainWindow) {
            mainWindow.webContents.send('output-log', '⚠️ Database detection failed. Use "Select Database" to choose manually.');
          }
        }
      }, 1000);
    }
  });

  // Save window size when resized
  mainWindow.on('resize', () => {
    if (mainWindow) {
      const [width, height] = mainWindow.getSize();
      try {
        const currentSettings = loadSettings();
        saveSettings(currentSettings.settings, currentSettings.mode, { width, height });
      } catch (error) {
        console.error('Error saving window size:', error);
      }
    }
  });

  // Open the DevTools in development
  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools();
  }

  // Save settings before closing
  mainWindow.on('close', () => {
    try {
      // Get current window size and save all settings
      if (mainWindow) {
        const [width, height] = mainWindow.getSize();
        const currentSettings = loadSettings();
        saveSettings(currentSettings.settings, currentSettings.mode, { width, height });
        console.log('Settings saved on window close');
      }
    } catch (error) {
      console.error('Error saving settings on close:', error);
    }
  });

  mainWindow.on('closed', () => {
    mainWindow = null;
  });
};

// Save settings before quitting the app
app.on('before-quit', () => {
  try {
    if (mainWindow) {
      const [width, height] = mainWindow.getSize();
      const currentSettings = loadSettings();
      saveSettings(currentSettings.settings, currentSettings.mode, { width, height });
      console.log('Settings saved on app quit');
    }
  } catch (error) {
    console.error('Error saving settings on quit:', error);
  }
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  setupIpcHandlers();
  createWindow();
});

// Quit when all windows are closed on all platforms
// This app should quit when the main window is closed
app.on('window-all-closed', () => {
  app.quit();
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
